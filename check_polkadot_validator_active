#!/usr/bin/env python3

"""
Nagios/Icinga2 style check in an attempt to verify a validator's state in a more idempotent manner
    (or at least as much as possible)

# Thanks to @aperture-exe:matrix.org for providing some guidance on what to check
#   https://matrix.to/#/
#       !LhjZccBOqFNYKLdmbb:polkadot.builders/
#       $168184239112460RQLKz:matrix.org?via=parity.io&via=matrix.org&via=corepaper.org
# Also inspired by:
#   https://github.com/paritytech/substrate/blob/master/scripts/ci/monitoring/
#       alerting-rules/alerting-rules.yaml
"""

import argparse
import asyncio
import json
import sys
import time
import traceback

# pylint: disable=import-error
from websockets.client import connect as ws_connect

STATUS_OK = 0
STATUS_WARNING = 1
STATUS_CRITICAL = 2
STATUS_UNKNOWN = 3

PREFIXES = {
    STATUS_OK: 'OK',
    STATUS_WARNING: 'WARNING',
    STATUS_CRITICAL: 'CRITICAL',
    STATUS_UNKNOWN: 'UNKNOWN'
}

DEFAULT_WS_SERVER = 'localhost'
DEFAULT_WS_PORT = 9944

# NumberOfPeersLow (substrate)
DEFAULT_MIN_PEERS = 3
# NoIncomingConnection (substrate)
# Enhance: substrate_sub_libp2p_incoming_connections_total
DEFAULT_MAX_HEIGHT_DISTANCE_WARN = 5
DEFAULT_MAX_HEIGHT_DISTANCE_CRIT = 10
# BlockProductionSlow (substrate)
DEFAULT_BEST_INCREASE_TIMEOUT = 15
# BlockFinalizationSlow (substrate)
DEFAULT_FINALIZED_INCREASE_TIMEOUT = 15

BLOCK_TYPE_BEST = 'best'
BLOCK_TYPE_FINALIZED = 'finalized'

RETURN_VALUE = -1
RETURN_MESSAGE = ''
RETURN_PERF_STATS = {}

PERF_IS_SYNCING_LABEL = 'is_syncing'
PERF_NUM_PEERS_LABEL = 'num_peers'
PERF_BLOCK_HEIGHT_DIFFERENCE_LABEL = 'height_diff'
PERF_BEST_INCREASE_TIME = 'best_increased'
PERF_FINALIZED_INCREASE_TIME = 'finalized_increased'

WS_MSG_METHOD_KEY = 'method'
WS_MSG_PARAMS_KEY = 'params'


def _set_return(this_return: int):
    # pylint: disable=global-statement
    global RETURN_VALUE
    if this_return > RETURN_VALUE:
        RETURN_VALUE = this_return


def _set_message(this_msg: str):
    # pylint: disable=global-statement
    global RETURN_MESSAGE
    if RETURN_MESSAGE:
        RETURN_MESSAGE += ' '
    RETURN_MESSAGE += this_msg


def _update_status(this_msg: str, this_return: int):
    """Helper function to update message and return
    """
    _set_message(this_msg)
    _set_return(this_return)


def _get_perf_is_syncing_limits(args):
    if args.warn_is_syncing:
        return ';1;;0;1'
    return ';;1;0;1'


def _get_perf_num_peers_limits(args):
    return f';;{args.num_peers};0;'


def _get_perf_block_height_limits(args):
    return f';{args.max_height_distance_warn};{args.max_height_distance_crit};0;'


def _get_perf_best_block_increase_limits(args):
    return f';;{args.best_block_timeout};0;'


def _get_perf_finalized_block_increase_limits(args):
    return f';;{args.finalized_block_timeout};0;'


def _update_perf_stats(perf_label: str, perf_value: str):
    RETURN_PERF_STATS[perf_label] = perf_value


def _get_output_message() -> str:
    return (f'{PREFIXES[RETURN_VALUE]}: {RETURN_MESSAGE}'
            f' | {",".join(f"{k}={v}" for k, v in RETURN_PERF_STATS.items())}')


def _build_ws_message(update_dict) -> dict:
    empty_msg = {
        'id': 1,
        'jsonrpc': '2.0',
        WS_MSG_METHOD_KEY: '',
        WS_MSG_PARAMS_KEY: [],
    }
    empty_msg.update(update_dict)
    return empty_msg


async def _connect_ws(server: str,
                      port: int,
                      message_dict: dict,
                      args,
                      return_result_dict: bool = True) -> dict:
    try:
        async with ws_connect(f'ws://{server}:{port}') as websocket:
            await websocket.send(json.dumps(message_dict))
            response = await websocket.recv()
            if args.verbose:
                print(f'Message: {message_dict} returned {response}')
            response_dict = json.loads(response)
            if return_result_dict:
                return response_dict['result']
            return response_dict
    except OSError as os_error:
        _update_status(str(os_error), STATUS_CRITICAL)
        _exit()


async def _is_syncing(args) -> bool:
    return (await _connect_ws(args.server,
                              args.port,
                              _build_ws_message({WS_MSG_METHOD_KEY: 'system_health'}),
                              args))['isSyncing']


async def _get_num_peers(args) -> int:
    return (await _connect_ws(args.server,
                              args.port,
                              _build_ws_message({WS_MSG_METHOD_KEY: 'system_health'}),
                              args))['peers']


async def _get_best_head_number(args) -> str:
    return (await _connect_ws(args.server,
                              args.port,
                              _build_ws_message({WS_MSG_METHOD_KEY: 'chain_getHeader'}),
                              args))['number']


async def _get_finalized_head(args) -> str:
    return (await _connect_ws(args.server,
                              args.port,
                              _build_ws_message({WS_MSG_METHOD_KEY: 'chain_getFinalizedHead'}),
                              args,
                              return_result_dict=False))['result']


async def _get_finalized_head_number(args) -> str:
    finalized_head = await _get_finalized_head(args)
    return (await _connect_ws(args.server,
                              args.port,
                              _build_ws_message({WS_MSG_METHOD_KEY: 'chain_getHeader',
                                                 WS_MSG_PARAMS_KEY: [finalized_head]}),
                              args))['number']


def _calculate_block_number_distance(best_block_num: str, finalized_block_num: str) -> int:
    # Enhance: Can finalized ever be higher than best? Should any negative value be CRITICAL?
    return abs(int(best_block_num, 16) - int(finalized_block_num, 16))


async def _check_is_syncing(args):
    # Check if we're syncing
    is_syncing = await _is_syncing(args)
    if is_syncing:
        _update_status('isSyncing: True.',
                       STATUS_WARNING if args.warn_is_syncing else STATUS_CRITICAL)
    else:
        _set_return(STATUS_OK)
    _update_perf_stats(PERF_IS_SYNCING_LABEL,
                       f'{1 if is_syncing else 0}{_get_perf_is_syncing_limits(args)}')


async def _check_num_peers(args):
    # Check how many peers we have
    num_peers = await _get_num_peers(args)
    if num_peers < args.num_peers:
        _update_status(f'Peers: {num_peers}.', STATUS_CRITICAL)
    else:
        _set_return(STATUS_OK)
    _update_perf_stats(PERF_NUM_PEERS_LABEL,
                       f'{num_peers}{_get_perf_num_peers_limits(args)}')


async def _check_block_height_difference(args):
    # Check block height distance
    best_head_block_number = await _get_best_head_number(args)
    finalized_head_block_number = await _get_finalized_head_number(args)
    block_height_difference = _calculate_block_number_distance(best_head_block_number,
                                                               finalized_head_block_number)
    if block_height_difference >= args.max_height_distance_crit:
        _update_status(f'Block Heights:'
                       f' Best: {best_head_block_number}.'
                       f' Finalized: {finalized_head_block_number}.',
                       STATUS_CRITICAL)
    elif block_height_difference >= args.max_height_distance_warn:
        _update_status(f'Block Heights:'
                       f' Best: {best_head_block_number}.'
                       f' Finalized: {finalized_head_block_number}.',
                       STATUS_WARNING)
    else:
        _set_return(STATUS_OK)
    _update_perf_stats(PERF_BLOCK_HEIGHT_DIFFERENCE_LABEL,
                       f'{block_height_difference}{_get_perf_block_height_limits(args)}')


async def _check_block_increasing(args, block_type: str):
    if block_type == BLOCK_TYPE_BEST:
        block_num_func = _get_best_head_number
        increase_timeout = args.best_block_timeout
        perf_label = PERF_BEST_INCREASE_TIME
        perf_units = _get_perf_best_block_increase_limits(args)
    elif block_type == BLOCK_TYPE_FINALIZED:
        block_num_func = _get_finalized_head_number
        increase_timeout = args.finalized_block_timeout
        perf_label = PERF_FINALIZED_INCREASE_TIME
        perf_units = _get_perf_finalized_block_increase_limits(args)
    else:
        print(f'Code error, unknown block_type: {block_type}')
        sys.exit(STATUS_UNKNOWN)
    await _do_check_block_increasing(args,
                                     block_type,
                                     block_num_func,
                                     increase_timeout,
                                     perf_label,
                                     perf_units)


async def _do_check_block_increasing(args, block_type, block_num_func,
                                     increase_timeout, perf_label, perf_units):
    # Enhance: Backoff algorithm? Median should be 3 seconds?
    # sleep_time = 0.5
    sleep_time = 2
    initial_block_num = await block_num_func(args)
    if args.verbose:
        print(f'Checking {block_type} blocks. Initial: {initial_block_num}.')
    initial_block_time = time.time()
    new_block_time = initial_block_time
    block_increase_elapsed = 0
    while block_increase_elapsed < increase_timeout:
        time.sleep(sleep_time / 2)
        new_block_num = await block_num_func(args)
        if args.verbose:
            print(f'Checking {block_type} blocks. Found: {new_block_num}.')
        new_block_time = time.time()
        if new_block_num > initial_block_num:
            # block number increased
            break
        # block number did not increase, update our elapsed time
        block_increase_elapsed = new_block_time - initial_block_time
    if block_increase_elapsed >= increase_timeout:
        if args.verbose:
            print(f'Checking {block_type} exceeded timeout before increasing from'
                  f' {initial_block_num}.')
        _update_status(f'{block_type} block number did not increase after'
                       f' {block_increase_elapsed}s',
                       STATUS_CRITICAL)
        block_increase_elapsed = 'inf'
    _update_perf_stats(perf_label, f'{block_increase_elapsed}{perf_units}')


def _exit():
    if RETURN_VALUE == STATUS_OK:
        _set_message('All checks passed.')
    print(_get_output_message())
    sys.exit(RETURN_VALUE)


async def run(args):
    """
    Perform the checks in a reasonable order.
    If the height distance is too large, skip the checks regarding Production and Finalization speed
    """
    await _check_is_syncing(args)
    await _check_num_peers(args)
    await _check_block_height_difference(args)
    await _check_block_increasing(args, BLOCK_TYPE_BEST)
    await _check_block_increasing(args, BLOCK_TYPE_FINALIZED)
    _exit()


def parse_args():
    """Parse command line arguments
    """
    parser = argparse.ArgumentParser(
        "This plugin checks a Polkadot/Kusama validator's Active status.")
    parser.add_argument('-s', '--server', type=str,
                        required=False,
                        dest='server',
                        default=DEFAULT_WS_SERVER,
                        help=f'WS server. Default: {DEFAULT_WS_SERVER}')
    parser.add_argument('-p', '--port', type=int,
                        required=False,
                        dest='port',
                        default=DEFAULT_WS_PORT,
                        help=f'WS port to connect to. Default: {DEFAULT_WS_PORT}')
    parser.add_argument('--warn-is-syncing',
                        dest='warn_is_syncing',
                        action='store_true',
                        help='isSyncing should be treated as a Warning. (Default: Critical)')
    parser.add_argument('--min-peers', type=int,
                        required=False,
                        dest='num_peers',
                        default=DEFAULT_MIN_PEERS,
                        help=f'minimum number of peers.'
                             f' Default: {DEFAULT_MIN_PEERS}')
    parser.add_argument('--max-distance-warn', type=int,
                        required=False,
                        dest='max_height_distance_warn',
                        default=DEFAULT_MAX_HEIGHT_DISTANCE_WARN,
                        help=f'max height distance for warning.'
                             f' Default: {DEFAULT_MAX_HEIGHT_DISTANCE_WARN}')
    parser.add_argument('--max-distance-crit', type=int,
                        required=False,
                        dest='max_height_distance_crit',
                        default=DEFAULT_MAX_HEIGHT_DISTANCE_CRIT,
                        help=f'max height distance for critical.'
                             f' Default: {DEFAULT_MAX_HEIGHT_DISTANCE_CRIT}')
    parser.add_argument('--best-timeout', type=int,
                        required=False,
                        dest='best_block_timeout',
                        default=DEFAULT_BEST_INCREASE_TIMEOUT,
                        help=f'best block increase timeout (in seconds).'
                             f' Default: {DEFAULT_BEST_INCREASE_TIMEOUT}')
    parser.add_argument('--finalized-timeout', type=int,
                        required=False,
                        dest='finalized_block_timeout',
                        default=DEFAULT_FINALIZED_INCREASE_TIMEOUT,
                        help=f'finalized block increase timeout (in seconds).'
                             f' Default: {DEFAULT_FINALIZED_INCREASE_TIMEOUT}')
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='store_true',
                        help='verbose output')
    args = parser.parse_args()
    if args.max_height_distance_warn > args.max_height_distance_crit:
        print('Max Height Distance warning must be greater than critical')
        sys.exit(STATUS_CRITICAL)
    return args


if __name__ == '__main__':
    try:
        asyncio.run(run(parse_args()))
    # pylint: disable=broad-except
    except Exception as ex:
        print(f'{sys.argv[0]}: Unhandled exception {type(ex)}')
        print(ex)
        traceback.print_exc()
        sys.exit(STATUS_CRITICAL)
